#!/bin/bash

# server config path
CONFIG_PATH=~/workspace/shell/servers

# common server config file
COMMON_CONFIG_FILE=".autossh_common"
CONFIG_MENU=()

cd $CONFIG_PATH

function check_server_config_dir()
{
	if [ ! -e $1 ]; then
		echo "path[$1] do not exists!"
		return 1
	fi

	if [ -n "$2" ] && [ $2 = "file" ] && [ ! -f $1 ]; then
		echo "file path[$1] do not exists!"
		return 1
	fi
	return 0
}

function list_servers()
{
	target="${CONFIG_PATH}/${1}";
	target=`echo $target|sed "s/[ \/]\{1,\}$//g"`
	check_server_config_dir $target
	if [ 1 -eq $? ]; then
		return;
	fi

	i=0;
	CONFIG_DIR=()
	CONFIG_FILE=()
	CONFIG_MENU=()
	for file in `ls $target |grep -v ${COMMON_CONFIG_FILE}`
	do
		file=`echo ${file} |sed "s/\@//g"`
		if [ -z "${file}" ]; then
			continue;
		fi
		
		if [ -d "${file}" ]; then
			CONFIG_DIR[$i]=$file;
		else
			CONFIG_FILE[$i]="$(($i+1))). $file\n";
			CONFIG_MENU[$i]="${target}/$file"
		fi
		i=$(($i+1));
	done

	if [ $i -gt 0 ]; then
		if [ ${#CONFIG_DIR[@]} -gt 0 ]; then
			echo -e "dirs:\n ${CONFIG_DIR[@]}"
		fi

		if [ ${#CONFIG_FILE[@]} -gt 0 ]; then
			echo -e "svrs:\n ${CONFIG_FILE[@]}"
			echo "-----------------------------"
			echo "tips: choose index to log in";
		fi
	else
		echo "nothing...";
	fi
}

function login_server()
{
	if [ "$1" -gt 0 ] 2>/dev/null; then
		idx=$(($1-1));
		target=${CONFIG_MENU[$idx]};
	else
		target="${CONFIG_PATH}/${1}";
	fi
	check_server_config_dir $target "file"
	if [ 1 -eq $? ]; then
		return;
	fi

	parse_config $target

	echo "logging in to [${HOST}], waiting..."

	ssh_cmd="ssh -o ServerAliveInterval=60";
	if [ -n "${PORT}" ]; then
		ssh_cmd="${ssh_cmd} -p ${PORT}";
	fi

	if [ -n "${PASSWORD}" ]; then
		ssh_cmd="${ssh_cmd} ${USER}@${HOST}";
		expect_cmd="
			expect {
				\"*assword\" {send \"${PASSWORD}\n\"}
				\"*yes/no*\" {send \"yes\n\"; exp_continue;}
				\"Last login\" {send_user \"log into \[${HOST}\] successfully...\n\"}
			} 
			interact
		"
		expect -c "
			set timeout 10
			spawn ${ssh_cmd}
			${expect_cmd}
		";
		echo -e " logout.\n"
	else 
		ssh_cmd="${ssh_cmd} -i ${IDENTITY_FILE}";
		ssh_cmd="${ssh_cmd} ${USER}@${HOST}";
		$ssh_cmd;
	fi
}

function get_command()
{
	command=$1
	while [ -z "${command}" ]
	do
		read -p "> " -e command;
	done
	echo $command;
}

function parse_config()
{
	i=1
	configs=($1)
	cur_dir=`dirname "$1"`
	while [ "$cur_dir" != "$CONFIG_PATH" ]; do
		target="$cur_dir/$COMMON_CONFIG_FILE"
		if [ -f $target ]; then
			configs[$i]=$target
			i=$(($i+1));
		fi
		cur_dir=`dirname "$cur_dir"`
	done

	i=$(($i-1))
	while [ $i -ge 0 ]; do
		read_server_config ${configs[$i]}
		i=$(($i-1))
	done
}

function read_server_config()
{
	# read config
	file=$1
	while read line; do  
		eval "$line"; 
	done < $file
}

function usage()
{
	echo "Usage: {list|login|quit}";
	if [ -n "$1" ]; then
		echo -e "help:\tDisplay help.";

		echo -e "list:\tList servers.";
		echo -e "\tlist [PATH]";

		echo -e "login:\tLogin server.";
		echo -e "\tlogin [PATH|ID]";
	fi
}

usage
command=`get_command "${*}"`
while [ -n "${command}" ]
do 
	args=($command)
	command=${args[0]}
	unset args[0]
	case "$command" in
	  list|ls)
		list_servers ${args[*]}
		;;
	  login)
		login_server ${args[*]}
		;;
	  help|h|"?")
		usage "detail"
		;;
	  quit|q)
		exit;
		;;
	  *)
	    login_server $command;
	esac
	command=`get_command`
done
